@model MvcCheckBoxListSampleApp.ViewModels.CitiesViewModel
@{
    ViewBag.Title = "ModelBased";
}

<h4>Advanced Example:</h4>

@if (Model.WasPosted) {
	<fieldset>
		<div class="title">POST result:</div>
		@if (Model.PostedCities.CityIDs != null) {
			@string.Join(", ", Model.SelectedCities.Select(x => x.Name))
		}
	</fieldset>
}

<fieldset>
	<div class="title">Set name manually</div>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("ModelBased", "Home", FormMethod.Get)) {
		  <p>
			  @Html.CheckBoxList("Cities",
													  x => x.AvailableCities,
													  x => x.Id,
													  x => x.Name,
													  x => x.SelectedCities)
		  </p>
		  <input class="green" type="submit" value="POST to controller" />
	  }
  </p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxList("Cities",                // checkbox list name          
                   x => x.AvailableCities,  // all checkbox values         
                   x => x.Id,               // field from data source to be used for checkbox VALUE              
                   x => x.Name,             // field from data source to be used for checkbox TEXT              
                   x => x.SelectedCities)   // selected values (list of selected 'Cities' in our case),
                                            // must be of same data type as source data or set to 'NULL'
</pre>
  </p>			
</fieldset>


<fieldset>
	<div class="title">Set name from view model</div>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("ModelBased", "Home", FormMethod.Get)) {
		  <p>
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities)
		  </p>
		  <input class="green" type="submit" value="POST to controller" />
	  }
	</p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,  // checkbox list name, 'PostedCities.CityIDs' in this case
                      x => x.AvailableCities,          
                      x => x.Id,               
                      x => x.Name,               
                      x => x.SelectedCities)
</pre>
  </p>
</fieldset>


<fieldset>
	<div class="title">Custom HTML tags from Model (Database)</div>
  <p>
    <label>Output:</label><br/><br/>
	  <em>Some cities will have custom tags from db set:</em>
	  <em>('<i>new {what = "smallCity"}</i>' for Monroe, and '<i>new {what = "bigCity"}</i>' for Moscow)</em>
	  @using (Html.BeginForm("ModelBased", "Home", FormMethod.Get)) {
		  <p class="custom_tags">
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities,
														  x => x.Tags)
		  </p>
		  <input class="green" type="submit" value="POST to controller" />
	  }
  </p>

  <p>
	  <label>Source Code:</label><br/><br/>
	  <em>We have this jquery code which will apply to certain custom tags from db:</em>
<pre>
$('[what="smallCity"]').css("color", "blue");
$('[what="bigCity"]').css("color", "green");
</pre>
    <em>And we call the control like this:</em>
<pre class="cs">
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                      x => x.AvailableCities,
                      x => x.Id,
                      x => x.Name,
                      x => x.SelectedCities,
                      x => x.Tags)            // tags stored in the data source as an 'object' e.g.: 'new {what = "smallCity"}'
                                              // they will be merged with other tags and applied to checkbox and its label
</pre>
  </p>
</fieldset>


<fieldset>
	<div class="title">Full Example</div>
	<p>
    <label>Output:</label>
	  @using (Html.BeginForm("ModelBased", "Home", FormMethod.Get)) {
		
		  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
													  x => x.AvailableCities,
													  x => x.Id,
													  x => x.Name,
													  x => x.SelectedCities,
							              new { @class="styled_checkbox" },
													  new HtmlListInfo(HtmlTag.vertical_columns, 2, new { @class="styled_list" }),
													  new[] {"3", "5", "7"},
							              x => x.Tags)
		  <p><input class="green" type="submit" value="POST to controller" /></p>
	  }
	</p>	

	<p>
    <label>Source Code:</label><br/><br/>
    <em>We have this style for each checkbox:</em>
	  <pre>.styled_checkbox {cursor:pointer; background:wheat; padding:2px 5px; border-radius:5px;}</pre>
	  <em>Also we have this style for the list wrapper:</em>
	  <pre>.styled_list {color:green; background:lightblue; padding:3px 10px 3px 5px; border-radius:5px;}</pre>
	  <em>And we apply it to formatting section:</em>
<pre class="cs">
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                      x => x.AvailableCities,
                      x => x.Id,
                      x => x.Name,
                      x => x.SelectedCities,
                      new { &#64;class="styled_checkbox" },                                             // additional html attributes
                      new HtmlListInfo(HtmlTag.vertical_columns, 2, new { &#64;class="styled_list" }),  // formatting
                      new[] {"3", "5", "7"},                                                        // disabled values
                      x => x.Tags)                                                                  // html tags from database
</pre>
  </p>
</fieldset>

@* jquery test area *@
<script type="text/javascript">
	$(document).ready(function () {
		$('.custom_tags [what="smallCity"]').css("color", "blue");
		$('.custom_tags [what="bigCity"]').css("color", "green");
	});
</script>